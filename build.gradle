buildscript {
  ext {
    flywayVersion = '11.10.1'
    postgresqlVersion = '42.7.7'
  }
  dependencies {
    classpath("org.postgresql:postgresql:$postgresqlVersion") // must be compatible with flyway version
    classpath("org.flywaydb:flyway-database-postgresql:$flywayVersion") // flyway dependency/plugin versions must always match
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.3'
  id 'org.owasp.dependencycheck' version '12.1.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
  id 'org.flywaydb.flyway' version "$flywayVersion"
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
  failFast = false
}

task functional(type: Test) {
  description = "Runs the functional tests."
  group = "Verification"

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs the integration tests."
  group = "Verification"

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  group = "Verification"

  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.3'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  incrementalAnalysis = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required.set(true)
    csv.required.set(false)
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/blobrouter/config/**',
        'uk/gov/hmcts/reform/blobrouter/Application.*' // no need to cover spring boot app entry point
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: blob-router-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:blob-router-service"
    property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.outputLocation.get().asFile.absolutePath
    property 'sonar.exclusions', "**/config/**,**/data/model/**,**/reconciliation/model/**,**/jms/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

configurations.all {
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

def versions = [
  reformLogging   : '6.1.9',
  flyway          : "$flywayVersion",
  postgresql      : "$postgresqlVersion"
]


dependencies {
  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
  runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flyway
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway
  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-spring', version: '6.9.0'
  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-provider-jdbc-template', version: '6.9.0'

  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.30.1'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.12'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'

  implementation group: 'org.checkerframework', name: 'checker-qual', version: '3.49.4'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.6'

  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.5'
  implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.1'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.1'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.2'

  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.14.0'
  implementation group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'
  implementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.8', classifier: 'all'

  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '4.3.0'

  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.21.2'
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.21.2'
  integrationTestImplementation group: 'com.icegreen', name: 'greenmail', version: '2.1.3'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.3'
  functionalTestImplementation group: 'com.jayway.awaitility', name: 'awaitility', version: '1.7.0'
  functionalTestImplementation group: 'com.typesafe', name: 'config', version: '1.4.3'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.5'

  smokeTestImplementation sourceSets.functionalTest.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.blobrouter.Application'

bootJar {
  getArchiveFileName().set(provider {
    'blob-router-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

import org.flywaydb.gradle.task.FlywayMigrateTask

flyway {
  user = System.getenv('DB_USER')
  password = System.getenv('DB_PASSWORD')

  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) { // set by jenkins
    url = "jdbc:postgresql://${dburl}"
  }
}
