<policies>
  <backend>
    <base/>
  </backend>
  <inbound>
    <base/>
    <choose>
      <when condition="@(context.Request.Headers["X-ARR-ClientCertThumbprint"] == null)">
        <return-response>
          <set-status code="401" />
          <set-body>Missing client certificate</set-body>
        </return-response>
      </when>
      <when condition="@(!(new string[] {ALLOWED_CERTIFICATE_THUMBPRINTS}.Any(c => context.Request.Headers.ContainsKey(&quot;X-ARR-ClientCertThumbprint&quot;) && context.Request.Headers[&quot;X-ARR-ClientCertThumbprint&quot;].Contains(c))))">
        <return-response>
          <set-status code="401" />
          <set-body>Invalid client certificate</set-body>
        </return-response>
      </when>
      <!-- Reconciliation endpoint -->
      <when condition="@(context.Request.Url.Path.Contains(&quot;reconciliation-report&quot;))">
        <send-request mode="new" response-variable-name="apiKeySecret" timeout="20" ignore-error="false">
          <set-url>https://reform-scan-{{environment}}.vault.azure.net/secrets/reconciliation-api-key/?api-version=7.0</set-url>
          <set-method>GET</set-method>
          <authentication-managed-identity resource="https://vault.azure.net" />
        </send-request>
        <!-- transform keyvault secret response to string -->
        <set-variable name="apiKeySecretResponse" value="@{
                var secret = ((IResponse)context.Variables[&quot;apiKeySecret&quot;]).Body.As<JObject>();
                return secret[&quot;value&quot;].ToString();
            }" />
        <!-- Set Apikey with Bearer as Authorization header -->
        <set-header name="Authorization" exists-action="override">
          <value>@("Bearer " + (string)context.Variables["apiKeySecretResponse"])</value>
        </set-header>
      </when>
    </choose>
  </inbound>
  <outbound>
    <base/>
  </outbound>
  <on-error>
    <base/>
  </on-error>
</policies>
