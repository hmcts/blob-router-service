package uk.gov.hmcts.reform.blobrouter.tasks;

import net.javacrumbs.shedlock.spring.annotation.SchedulerLock;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import uk.gov.hmcts.reform.blobrouter.model.out.EnvelopeSummaryItem;
import uk.gov.hmcts.reform.blobrouter.services.email.EmailSender;
import uk.gov.hmcts.reform.blobrouter.services.report.ReportCsvWriter;
import uk.gov.hmcts.reform.blobrouter.services.report.ReportService;

import java.io.File;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * The `SendDailyReportTask` class in Java sends a daily report via email with an attachment containing envelope summary
 * data.
 */
@Component
@ConditionalOnProperty("scheduling.task.send-daily-report.enabled")
public class SendDailyReportTask {
    private static final Logger logger = LoggerFactory.getLogger(SendDailyReportTask.class);

    static final String EMAIL_SUBJECT = "Reform Scan daily report";
    static final String EMAIL_BODY = "This is an autogenerated email. Do not respond to it.";
    static final String ATTACHMENT_PREFIX = "reform_scan_envelopes_";
    static final String ATTACHMENT_SUFFIX = ".csv";

    private static final String TASK_NAME = "send-daily-report";
    private final ReportService reportService;
    private final ReportCsvWriter reportCsvWriter;
    private final EmailSender emailSender;
    private final String from;
    private final String[] recipients;

    // region constructor
    public SendDailyReportTask(
        ReportService reportService,
        ReportCsvWriter reportCsvWriter,
        EmailSender emailSender,
        @Value("${spring.mail.username}") String from,
        @Value("${reports.recipients}") String[] recipients
    ) {
        this.reportService = reportService;
        this.reportCsvWriter = reportCsvWriter;
        this.emailSender = emailSender;
        this.from = from;

        if (recipients == null || recipients.length == 0) {
            throw new RuntimeException("No recipients configured for reports");
        } else {
            this.recipients = Arrays.copyOf(recipients, recipients.length);
        }
    }
    // endregion

    @Scheduled(cron = "${scheduling.task.send-daily-report.cron}")
    @SchedulerLock(name = TASK_NAME)
    public void sendReport() {
        logger.info("Started {} job", TASK_NAME);

        final LocalDate reportDate = getPreviousDay();

        final List<EnvelopeSummaryItem> report = reportService.getDailyReport(reportDate);

        try {
            final File reportFile = reportCsvWriter.writeEnvelopesSummaryToCsv(report);

            emailSender.sendMessageWithAttachments(
                EMAIL_SUBJECT,
                EMAIL_BODY,
                from,
                recipients,
                Map.of(getReportAttachmentName(reportDate), reportFile)
            );
        } catch (Exception ex) {
            logger.error(
                "Error sending daily report for the date: {}",
                reportDate,
                ex
            );
        }

        logger.info("Finished {} job", TASK_NAME);
    }

    /**
     * The function `getPreviousDay()` returns the LocalDate object representing the previous day from the current date.
     *
     * @return The method `getPreviousDay()` returns the LocalDate object representing the previous day from the current
     *      date.
     */
    private LocalDate getPreviousDay() {
        return LocalDate.now().minusDays(1);
    }

    /**
     * The function `getReportAttachmentName` returns a string by concatenating a prefix, a given report date, and a
     * suffix.
     *
     * @param reportDate The `reportDate` parameter is of type `LocalDate`,
     *                   which represents a date without a time zone in the ISO-8601 calendar system.
     * @return The method `getReportAttachmentName` returns a String that is a concatenation of
     *      `ATTACHMENT_PREFIX`, `reportDate`, and `ATTACHMENT_SUFFIX`.
     */
    private String getReportAttachmentName(LocalDate reportDate) {
        return ATTACHMENT_PREFIX + reportDate + ATTACHMENT_SUFFIX;
    }
}
