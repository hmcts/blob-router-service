#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "reform-scan"
def component = "blob-router"

def channel = '#bsp-build-notices'

env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = 'hmctspublic.azurecr.io/imported/'

def combinedSecrets = [
   'reform-scan-${env}': [
     // Base64-encoded PKCS 12 key store, containing client's private key and certificate known to the API
     secret('test-valid-key-store', 'TEST_VALID_KEY_STORE'),
     secret('test-valid-key-store-password', 'TEST_VALID_KEY_STORE_PASSWORD'),

     // Base64-encoded PKCS 12 key store containing private key and certificate known to the API, but expired
     secret('test-expired-key-store', 'TEST_EXPIRED_KEY_STORE'),
     secret('test-expired-key-store-password', 'TEST_EXPIRED_KEY_STORE_PASSWORD'),

     // Base64-encoded PKCS12 key store containing private key and certificate known to the API, but not yet valid
     secret('test-not-yet-valid-key-store', 'TEST_NOT_YET_VALID_KEY_STORE'),
     secret('test-not-yet-valid-key-store-password', 'TEST_NOT_YET_VALID_KEY_STORE_PASSWORD'),

     secret('test-subscription-key', 'TEST_SUBSCRIPTION_KEY'),

     secret('storage-account-staging-secondary-key', 'TEST_STORAGE_ACCOUNT_KEY'),
     secret('storage-account-staging-name', 'TEST_STORAGE_ACCOUNT_NAME'),
     secret('reconciliation-api-key', 'TEST_RECONCILIATION_API_KEY')
   ]
 ]

 def smokeTestSecrets = [
   'reform-scan-${env}': [
     secret('test-valid-key-store', 'TEST_VALID_KEY_STORE'),
     secret('test-valid-key-store-password', 'TEST_VALID_KEY_STORE_PASSWORD'),

     secret('test-expired-key-store', 'TEST_EXPIRED_KEY_STORE'),
     secret('test-expired-key-store-password', 'TEST_EXPIRED_KEY_STORE_PASSWORD'),

     secret('test-not-yet-valid-key-store', 'TEST_NOT_YET_VALID_KEY_STORE'),
     secret('test-not-yet-valid-key-store-password', 'TEST_NOT_YET_VALID_KEY_STORE_PASSWORD'),

     secret('test-subscription-key', 'TEST_SUBSCRIPTION_KEY'),
     secret('reconciliation-api-key', 'TEST_RECONCILIATION_API_KEY')
   ]
 ]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

static String previewAccountName(Kubectl kubectl, String secretName, String namespace) {
  kubectl.getSecret(secretName, namespace, "{.data.storageAccountName}")
}

static String previewAccountKey(Kubectl kubectl, String secretName, String namespace) {
  kubectl.getSecret(secretName, namespace, "{.data.accessKey}")
}

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  afterSuccess('test') {
    builder.gradle('integration')
  }

  enableDbMigration('reform-scan') // vault 'prefix'
  enableAksStagingDeployment()
  enableSlackNotifications(channel)
  disableLegacyDeployment()

  onNonPR() {
    loadVaultSecrets(combinedSecrets)
  }

  onPR(){
    loadVaultSecrets(smokeTestSecrets)
  }

  def branchesToSync = ['demo', 'perftest']
  syncBranchesWithMaster(branchesToSync)

  // Vars needed for smoke / functional testing
  env.TEST_STORAGE_CONTAINER_NAME = 'bulkscan'
  env.TEST_STORAGE_ACCOUNT_URL = 'https://reformscanaatstaging.blob.core.windows.net'
  env.API_GATEWAY_URL = "https://cft-mtls-api-mgmt-appgw.aat.platform.hmcts.net/reform-scan"

  before('smoketest:preview') {
     withAksClient('nonprod', product) {
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT, env.LAST_COMMIT_TIMESTAMP)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def storageSecret = "storage-secret-reform-scan"
      def storageSecretName = "storage-account-reform-scan"
      def crimeStorageAccountSecret = "storage-secret-crime-reform-scan"
      def serviceBusSecret = "reform-scan-sb-preview"

      def namespace = new TeamConfig(this).getNameSpace(product)
      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get storage account details from kubernetes
       env.TEST_STORAGE_ACCOUNT_KEY = kubectl.getSecret(storageSecret, namespace, "{.data.accessKey}")
       env.TEST_STORAGE_ACCOUNT_URL = kubectl.getSecret(storageSecret, namespace, "{.data.blobEndpoint}")
       env.TEST_STORAGE_ACCOUNT_NAME = kubectl.getSecret(storageSecretName, namespace, "{.data.storage_account_name}")

       // log the values
       echo "storage account url : ${env.TEST_STORAGE_ACCOUNT_URL}"
       echo "storage account name : ${env.TEST_STORAGE_ACCOUNT_NAME}"
       echo "storage account key : ${env.TEST_STORAGE_ACCOUNT_KEY}"

      env.NOTIFICATIONS_QUEUE_NAME = "${aksServiceName}-servicebus-notifications"
      env.NOTIFICATIONS_QUEUE_NAMESPACE = "reform-scan-sb-preview"
      env.NOTIFICATIONS_QUEUE_ACCESS_KEY_WRITE = kubectl.getSecret("reform-scan-sb-preview", namespace, "{.data.primaryKey}")
      env.JMS_ENABLED = false
      env.SPRING_PROFILES_ACTIVE = 'default'
    }
  }
}
